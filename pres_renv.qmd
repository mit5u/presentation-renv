---
title: "Pr√©sentation de {renv}"
subtitle: "Survivre aux mont√©es de version des packages R"
author: "Jocelyn B√©ziau"
date: "07 novembre 2022"
institute: "Pise"
logo: "www/hex_renv.png"
footer: "Pr√©sentation de {renv} - Survivre aux mont√©es de version des packages R"
format: 
  revealjs:
    transition: convex
    theme: dark
editor: visual
eval: false
echo: true
---

## Pourquoi s'inqui√©ter de la version de nos packages ?

::: notes
-   C'√©tait Halloween r√©cemment, donc je vais commencer par une histoire qui fait peur, et qui peut arriver √† n'importe qui, d'ailleurs c'est peut-√™tre d√©j√† arriv√© √† des gens que vous connaissez...
-   Fin mai 2020, d√©pr√©ciation des `mutate_at()` en faveur de `across()`
-   plus de warning lors de la combinaison de facteurs avec des caract√®res
-   changement du type du r√©sultat de la combinaison de plusieurs facteurs
-   changement de m√©thode pour les tests d'√©galit√© sur data.frames (!)
-   c'est encore pire si on saute plusieurs versions de packages avec une mise √† jour (voir les changelogs combin√©s sur https://diffify.com/ par exemple), par exemple entre une version disponible sur l'ancien AUS (juin 2019) et une version disponible au lancement du nouvel AUSv3 (octobre 2020)
:::

Exemple sur [dplyr](https://dplyr.tidyverse.org/news/index.html#dplyr-100)

. . .

ü•∞ Des fonctionnalit√©s nouvelles

. . .

ü•∞ Des bugs corrig√©s

. . .

ü•∂ Des fonctions qui disparaissent

. . .

ü•∂ Des comportements par d√©faut qui changent

. . .

ü•∂ Des warnings qui deviennent des erreurs (bloquantes)

------------------------------------------------------------------------

Les packages s'ins√®rent toujours dans un √©co-syst√®me, plus ou moins stable et plus ou moins complexe

::: notes
-   Ici, rlang est une d√©pendance commune √† dplyr et ggplot2 : les probl√®mes mentionn√©s pr√©c√©demment se multiplient potentiellement car les packages doivent se parler entre eux !
-   levez la main si vous n'avez jamais eu un message d'erreur mettant en cause rlang, vctrs ou pillar en essayant de mettre √† jour un package du tidyverse !
-   le diagramme pour un ensemble de packages pour un projet "de la vraie vie" est tr√®s vite illisible (surtout si l'ensemble inclut tidyverse, shiny, ...)
-   avoir un √©co-syst√®me coh√©rent de packages est facile √† un instant T (en mettant tout √† jour depuis le CRAN), beaucoup plus dur √† garantir dans le temps. Pourquoi ? (voir slide suivante)
:::

![D√©pendances de {dplyr} et {ggplot2} - *diagramme de Sankey trac√© avec {RWsearch}*](www/sankey_dplyr_ggplot.png){fig-align="center"}

------------------------------------------------------------------------

![](www/what-could-possibly-go-wrong-cartman.gif){fig-align="center"}

. . .

‚ò£Ô∏è `install.packages()` installe toujours la version la plus r√©cente disponible

. . .

‚ò£Ô∏è (r√©-)installer un package met √† jour ses d√©pendances (par d√©faut)

. . .

‚ò£Ô∏è l'√©tat de notre r√©pertoire de packages (`.libPaths()`) n'est pas forc√©ment stable

::: notes
-   Tous ces m√©canismes peuvent rendre incompatibles ("chaotiques") les versions de nos packages, qui n'arrivent plus √† se comprendre
-   On peut donc se retrouver presque du jour au lendemain avec des packages impossibles √† charger (voir slide suivante)
:::

------------------------------------------------------------------------

![](www/library_ggplot_failed.png){fig-align="center"}

. . .

![](www/anya_namespace_failed.gif){fig-align="center"}

## Comment garantir la reproductibilit√© de nos travaux ?

. . .

![](www/tout_cramer_et_reprendre_a_zero.gif){fig-align="center"}

------------------------------------------------------------------------

-   Solutions manuelles :

::: notes
-   Conserver √† la main une trace de la configuration qui marchait, c'est d√©j√† une partie de la r√©solution du probl√®me le jour o√π √ßa ne fonctionne plus. En pratique, √ßa peut m√™me √™tre suffisant, tout d√©pend de l'√©chelle de temps et de l'enjeu d'automatisation autour de notre script/application (a priori, l'environnement d'un batch qu'on lance sans jamais en regarder le contenu a besoin d'√™tre mieux bichonn√© qu'un script qu'on lance √† la main pour une √©tude ponctuelle ou des travaux exploratoires ou innovants)
-   On peut aussi limiter les risques de d√©pendances chaotiques en isolant les r√©pertoires de packages des diff√©rents projets, mais √ßa reste un peu laborieux de revenir √† un √©tat qui fonctionnait si une mise √† jour de packages casse notre programme
-   A priori dans tout ce que j'ai racont√© jusqu'ici, vous n'avez pas appris grand-chose, donc il est grand temps de pr√©senter ce pour quoi vous √™tes toutes et tous venus aujourd'hui, √† savoir le package {renv}
:::

Quels packages sont charg√©s dans ma session R ? Dans quelle version ?

```{r}
sessionInfo()
devtools::install_version(package = "dplyr", version = "0.8.0")
```

. . .

Isoler les r√©pertoires de packages pour chaque projet

```{r}
chemin_packages <- "U:/SED/SED_PISE/mon_projet_critique"
.libPaths(chemin_packages)
.libPaths() # 1er emplacement utilis√© pour install.packages() et library()
```

. . .

-   Solution semi-automatique :

```{r}
renv::init()
renv::snapshot()
renv::restore()
```

## Prise en main de {renv}

. . .

www/mais_pour_quoi_faire.gif){fig-align="center"}

------------------------------------------------------------------------

::: notes
Package d√©velopp√© par Kevin Ushey (RStudio), en remplacement de {packrat} (m√™me auteur !), qui posait √† peu pr√®s autant de probl√®mes sur Windows qu'il en r√©solvait (j'exag√®re un peu, mais pas tant que √ßa, c'√©tait tr√®s vite un gros casse-t√™te quand le plan ne se d√©roulait pas sans accroc)
:::

Que permet {renv} ? G√©rer localement les d√©pendances dans les projets R et les rendre :

-   Isol√©s (pas d'effets de bords sur les autres projets)
-   Portables (partage des versions des d√©pendances)
-   Reproductibles (snapshot & restore)

. . .

![](www/anya_wakuwaku.gif){fig-align="center"}

------------------------------------------------------------------------

![](www/quest_ce_quon_fait.gif){fig-align="center"}

. . .

![](www/press_start.gif){fig-align="center"}

------------------------------------------------------------------------

::: notes
En pratique, je recommande d'utiliser un projet RStudio pour tout bien ranger comme il faut dans les dossiers et avoir les bonnes fa√ßons de faire "par d√©faut" (ce qu'on appelle parfois le "pitfall of success" : le chemin le plus facile et intuitif co√Øncide avec celui qui r√©sulte de l'application des bonnes pratiques, de sorte que pour faire les choses "mal", on soit oblig√© de le faire expr√®s (parfois pour de bonnes raisons, mais dans ce paradigme, jamais par inadvertance ou amateurisme)). En l'esp√®ce, le fait de travailler dans un projet RStudio permet d'activer renv et git en deux clics, mais stricto sensu, on n'a pas besoin de RStudio ni de git pour utiliser renv.

Juste un point d'attention, pas sp√©cifique √† renv, mais sur AUS (ou n'importe quel environnement coup√© d'internet), RStudio peut vous proposer d'installer pour vous des packages dont il estime avoir besoin pour faire ce que vous voulez d'apr√®s les boutons sur lesquels vous cliquez... mais il va forc√©ment chercher √† atteindre le CRAN et se planter (car on n'utilise pas le CRAN sur AUS, mais un d√©p√¥t interne qui a le m√™me contenu, sauf que certaines fonctions de RStudio ne comprennent pas ce param√©trage et se heurtent au pare-feu comme une mouche au pare-brise). Bref, tout √ßa pour dire qu'il vaut mieux noter les packages que RStudio propose d'installer quand on clique quelque part, refuser leur installation par RStudio, et faire les `install.packages()` ad hoc soi-m√™me avant de re-cliquer sur les boutons qui nous int√©ressent. C'est vrai pour renv, c'est vrai pour Rmarkdown, et c'est vrai pour les packages qu'il d√©tecte via les instructions `library()` ou `nom_package:::nom_fonction()` dans les scripts enregistr√©s que vous avez ouverts dans RStudio.
:::

Dans RStudio :

![](www/create_project.png){fig-align="center"}

. . .

```{r}
# travail normal
renv::snapshot() # pour sauvegarder les versions de packages utilis√©es
# travail normal mais avec des probl√®mes
renv::restore()  # pour restaurer les versions de packages sauvegard√©es
```

------------------------------------------------------------------------

ou

```{r}
install.packages("renv")
renv::init()
# travail normal
renv::snapshot()
# travail normal mais avec des probl√®mes
renv::restore()
```

. . .

![](www/quoi_cest_tout.gif){fig-align="center"}

## Travailler avec git et renv ?

. . .

![](www/yor_git_renv.gif){fig-align="center"}

------------------------------------------------------------------------

Il suffit d'avoir dans le d√©p√¥t git :

-   `renv.lock` (versions des packages √† installer)
-   `renv/activate.R` (activation de renv avec les bons param√®tres)
-   `.Rprofile` (lancer automatiquement le script pr√©c√©dent √† chaque nouvelle session)

. . .

et de lancer `renv::restore()` une fois le d√©p√¥t clon√© !

. . .

Puis `renv::snapshot()` si n√©cessaire, et commit/push comme d'habitude (attention aux conflits sur `renv.lock`)

::: notes
En pratique, je ne sais pas comment sont organis√©s vos d√©p√¥ts Gitlab, mais pour le `renv.lock`, faire les commit/push vers une seule branche commune √† tous les d√©veloppeurs √©vite que chacun ait sa version de `renv.lock`, et donc de devoir r√©soudre des conflits ensuite. Alternativement, on peut garder une organisation avec plusieurs branches, mais il vaut mieux se mettre d'accord sur le fait que personne ne touche au `renv.lock` (donc que personne ne fasse de `renv::snapshot()`) sans concertation, sous peine de devoir g√©rer des probl√®mes lors des merges.
:::

## Travailler avec Python et renv ?

. . .

![](www/anya_python_renv.gif){fig-align="center"}

------------------------------------------------------------------------

C'est possible (mais pas sur AUS a priori) =\> SSPLab

. . .

On peut utiliser `renv::use_python()` pour ajouter un environnement Python d√©di√© au projet :

. . .

-   `reticulate::py_install()` installera les modules Python dans cet environnement

. . .

-   `renv::snapshot()` capturera les modules Python dans un fichier `requirements` (en parall√®le des packages R sauv√©s dans `renv.lock`), qui pourront √™tre t√©l√©charg√©s "comme d'habitude" via `renv::restore()`

## Fonctionnalit√©s avanc√©es

------------------------------------------------------------------------

-   Optimiser (ou pas) l'espace disque et les temps d'installation

::: notes
Par d√©faut, renv fait un lien symbolique entre le r√©pertoire de packages de votre projet et un r√©pertoire avec tous les packages de tous les projets install√©s avec renv. Cela permet de partager entre plusieurs projets les packages identiques (m√™me nom, m√™me version), en gardant un cloisonnement (lorsque les projets g√©n√®rent des modifications dans leurs r√©pertoires propres, le cache global est enrichi mais les autres r√©pertoires de packages ne sont pas modifi√©s). On gagne aussi du temps si on doit installer un m√™me package (au hasard, tidyverse, qui prend plusieurs minutes) dans de multiples projets : le "t√©l√©chargement" ne se fait alors pas depuis internet mais depuis ce cache global, c'est beaucoup plus rapide.

Cela dit, on peut vouloir d√©sactiver ce fonctionnement, ce qui se fait en une ligne de code
:::

. . .

![](www/renv_cache.png){fig-align="center"}

. . .

```{r}
renv::install()
renv::settings$use.cache(FALSE) # d√©sactive l'usage du cache global
```

------------------------------------------------------------------------

::: notes
Cela peut servir par exemple quand on est d√©veloppeur d'un package, et qu'on souhaite g√©rer sans prise de t√™te les d√©pendances de notre package. Voir aussi {funspotr} pour d√©tecter automatiquement les packages et fonctions utilis√©s dans un projet et {itdepends} pour mesurer √† quel point les d√©pendances sont fortes et quel temps elles co√ªtent au build/installation du package
:::

-   D√©duire automatiquement quels packages sont utilis√©s dans le projet

```{r}
renv::dependencies() # uniquement les packages charg√©s dans un .R/.Rnw/.Rmd
```

. . .

-   Tracer l'historique des modifications de `renv.lock`

```{r}
renv::history()
renv::revert(commit = "abc123")
```

. . .

-   Modifier le comportement par d√©faut de {renv}

```{r}
?renv::paths # emplacements des r√©pertoires et du cache global
?renv::config # param√©trage au niveau utilisateur
?renv::settings # param√©trage au niveau du projet
```

## Est-ce la panac√©e ?

::: notes
On r√©sout des probl√®mes, mais on ne r√©sout pas tous les probl√®mes !

Dans tous les cas, √† l'Insee chaque version de R a un cycle de vie pr√©vu pour 3 ans. La veille est par ailleurs indispensable pour guider les travaux de maintenance et √©viter de subir l'extinction de fonctions d√©pr√©ci√©es (ou la disparition soudaine de packages retir√©s du CRAN).

C'est d'autant plus facile de suivre le cycle de vie des packages et leurs changements disruptifs que l'on utilise un nombre raisonn√© de packages et que l'on comprend pourquoi ils sont dans nos projets.

Sources de veille : rweekly, le blog de tidyverse, le slack grrr, le canal Tchap Entraide R SED44, ...
:::

. . .

![](www/cest_propre_cest_sain.gif){fig-align="center"}

------------------------------------------------------------------------

![](www/anya_pas_la_panacee.gif){fig-align="center"}

::: fragment
üòµ Pas de gestion des d√©pendances syst√®me (version de R, de l'OS, ...) =\> docker !
:::

::: fragment
ü§Ø {renv} reste un package, donc soumis aux r√®gles de cycle de vie vues au d√©but !
:::

::: fragment
‚ò†Ô∏è si les packages n√©cessaires ne sont plus disponibles sur le d√©p√¥t d'installation, ils ne pourront pas √™tre install√©s !
:::

## Pour aller plus loin

::: notes
J'ai essay√© de compiler des sources en fran√ßais, mais malheureusement la mati√®re premi√®re est principalement anglophone.

Sur la pr√©sentation du package, il y a pas mal d'√©l√©ments redondants entre les sources, mais elles sont sur des supports diff√©rents (pr√©sentation orale enregistr√©e, diaporama seul, article de blog, vignette, documentation technique), donc allez butiner ce qui vous semble le plus facile √† consommer ; j'ai mis aussi un lien pour les curieux qui veulent des id√©es d'int√©gration avec Docker, s'il y en a parmi vous qui veulent se faire la main avec le SSP Cloud, personnaliser son image RStudio pour y int√©grer ce dont on a besoin (par exemple renv ou Python) c'est une bonne fa√ßon de se familiariser avec l'√©co-syst√®me, et √ßa peut √©ventuellement servir pour les autres utilisateurs aussi, enfin bref, je digresse un peu.
:::

-   üá´üá∑ [Package renv : pr√©sentation et retour d'exp√©rience](https://elise.maigne.pages.mia.inra.fr/2021_package_renv/presentation.html#1), √âlise Maign√©
-   üá¨üáß [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html), Kevin Ushey
-   üá¨üáß [renv : Project Environments for R - rstudio::conf(2020)](https://www.youtube.com/watch?v=yjlEbIDevOs), Kevin Ushey (20min) et [diaporama associ√©](https://kevinushey-2020-rstudio-conf.netlify.app/slides.html#1)
-   üá¨üáß [renv sur le CRAN](https://cran.r-project.org/web/packages/renv/index.html) et [vignette de pr√©sentation](https://cran.r-project.org/web/packages/renv/vignettes/renv.html)
-   üá¨üáß [Using renv with Docker](https://mran.revolutionanalytics.com/snapshot/2021-03-20/web/packages/renv/vignettes/docker.html)

## Place aux questions !

::: notes
voil√†, j'esp√®re que √ßa vous aura donn√© envie d'adopter cette fa√ßon de travailler ; si les pistes manuelles qu'on a vues avec le `sessionInfo()` ou l'isolation du projet par le truchement de `.libPaths()` vous conviennent, c'est tr√®s bien aussi.

Parmi ces trois approches, j'ai pas de bons ou de mauvais points √† distribuer, c'est aussi en fonction de votre aisance avec les outils et de vos exigences de reproductibilit√© que vous pouvez d√©finir vos fa√ßons de travailler et de collaborer.

Dans le temps qu'il nous reste, on peut √©changer √† partir de vos questions, si vous voulez revenir sur des √©l√©ments de la pr√©sentation ou d√©velopper un point que je n'ai pas abord√©... vous avez la parole !
:::

. . .

![](www/questions_sakura.gif){fig-align="center"}

------------------------------------------------------------------------

## Merci pour votre attention \~

![](www/curtsy-alice.gif){fig-align="center"}
